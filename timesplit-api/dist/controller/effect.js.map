{"version":3,"sources":["../../src/controller/effect.js"],"names":["config","db","api","get","req","res","find","err","effects","send","json","findById","params","id","effect","category","post","newEffect","name","body","description","effectedDate","save","message","delete","status","remove","_id","comment","put","newComment","title","text","push","comments"],"mappings":"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","file":"effect.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Effect from '../model/effect';\nimport Comment from '../model/comment';\nimport bodyParser from 'body-parser';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // '/v1/effect' - GET all effects\n  api.get('/', (req, res) => {\n    Effect.find({}, (err, effects) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(effects);\n    });\n  });\n\n  // '/v1/effects/:id' - GET a specific effect\n  api.get('/:id', (req, res) => {\n    Effect.findById(req.params.id, (err, effect) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(effect);\n    });\n  });\n\n  // '/v1/effect/category/:category' - Get category\n  api.get('/effect/:category', (req, res) => {\n    Effect.find({ category: req.params.effect }, (err, effect) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(effect);\n    });\n  });\n\n\n  // '/v1/effect/add' - POST - add a effect\n  api.post('/add', authenticate, (req, res) => {\n    let newEffect = new Effect();\n    newEffect.name = req.body.name;\n    newEffect.category = req.body.category;\n    newEffect.description = req.body.description;\n    newEffect.effectedDate = req.body.effectedDate;\n    newEffect.save(function(err) {\n      if (err) {\n        res.send(err);\n      }\n      res.json({ message: 'Effect saved successfully' });\n    });\n  });\n\n  // '/v1/effect/:id' - DELETE - remove a effect\n  api.delete('/:id', authenticate, (req, res) => {\n    Effect.findById(req.params.id, (err, effect) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (effect === null) {\n        res.status(404).send(\"Effect not found\");\n        return;\n      }\n      Effect.remove({\n        _id: req.params.id\n      }, (err, effect) => {\n        if (err) {\n          res.status(500).send(err);\n          return;\n        }\n        Comment.remove({\n          effect: req.params.id\n        }, (err, comment) => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({message: \"Effect and Comment Successfully Removed\"});\n        });\n      });\n    });\n  });\n\n  // '/v1/effect/:id' - PUT - update an existing record\n  api.put('/:id', authenticate, (req, res) => {\n    Effect.findById(req.params.id, (err, effect) => {\n      if (err) {\n        res.send(err);\n      }\n      effect.name = req.body.name;\n      effect.category = req.body.category;\n      effect.description = req.body.description;\n      effect.effectedDate = req.body.effectedDate;\n      effect.save(function(err) {\n        if (err) {\n          res.send(err);\n        }\n        res.json({ message: 'Effect info updated' });\n      });\n    });\n  });\n\n  // add a comment by a specific effect id\n  // '/v1/effect/comments/add/:id'\n  api.post('/comment/add/:id', authenticate, (req, res) => {\n    Effect.findById(req.params.id, (err, effect) => {\n      if (err) {\n        res.send(err);\n      }\n      let newComment = new Comment();\n\n      newComment.title = req.body.title;\n      newComment.text = req.body.text;\n      newComment.comment = effect._id;\n      newComment.save((err, comment) => {\n        if (err) {\n          res.send(err);\n        }\n        effect.comment.push(newComment);\n        effect.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({ message: 'Effect Comment saved' });\n        });\n      });\n    });\n  });\n\n  // get comments for a specific effect id\n  // '/v1/effect/comments/:id'\n  api.get('/comments/:id', (req, res) => {\n    Comment.find({effect: req.params.id}, (err, comments) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(comments);\n    });\n  });\n\n  return api;\n}\n"]}